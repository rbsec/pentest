#!/bin/bash

# This script is intended to be run on a clean Kali install
# It installs and configures a number of additional tools, and changes a few useful settings

# Re-run with sudo if we're not root
if [[ $EUID -ne 0 ]];
then
    echo "Root privileges required, re-running with sudo"
    exec sudo "$0"
    exit
fi

# Run main Linux setup script
bash debian.sh

# Packages
apt install awscli docker.io eyewitness freeipmi-tools hcxdumptool hcxtools gcc-mingw-w64 libguestfs-tools ncat ntpstat open-iscsi python3-dnspython python3-netaddr python3-virtualenv python3-pyftpdlib python3-jwt redis-tools telnet traceroute
apt purge -y network-manager
apt autoremove -y
apt autoclean

# Metasploit
mkdir -p ~/.msf4
ln -s $(dirname $0)/scripts/msfconsole.rc ~/.msf4/msfconsole.rc
systemctl start postgresql.service
msfdb init

#########
# Tools #
#########

# Dnscan
git clone https://github.com/rbsec/dnscan /opt/dnscan
ln -s /opt/dnscan/dnscan.py /usr/local/bin/dnscan.py

# Reposcanner
git clone https://github.com/dionach/reposcanner /opt/reposcanner
ln -s /opt/reposcanner/reposcanner.py /usr/local/bin/reposcanner.py

# pwdumpstats
git clone https://github.com/rbsec/pwdumpstats /opt/pwdumpstats
ln -s /opt/pwdumpstats/pwdumpstats.py /usr/local/bin/pwdumpstats.py

# CODA Pentest Scripts
git clone https://github.com/codagroup/pentestscripts /opt/pentestscripts
ln -s /opt/pentestscripts/sourcescan.py /usr/local/bin/sourcescan.py

# Frogger
git clone https://github.com/commonexploits/vlan-hopping /opt/frogger
ln -s /opt/frogger/froggers.sh /usr/local/bin/froggers.sh
chmod +x /opt/frogger/froggers.sh

# ScoutSuite
git clone https://github.com/nccgroup/ScoutSuite /opt/scoutsuite
cd /opt/scoutsuite
virtualenv -p python3 venv
. venv/bin/activate
pip3 install -r requirements.txt
pip3 install azure-cli
cat <<EOT > /usr/local/bin/scout.sh
#!/bin/sh
. /opt/scoutsuite/venv/bin/activate > /dev/null 2>&1 && /opt/scoutsuite/scout.py $@
EOT
chmod +x /usr/local/bin/scout.sh
exit

# jwt2john
wget --quiet -O /usr/local/bin/jwt2john.py "https://raw.githubusercontent.com/Sjord/jwtcrack/master/jwt2john.py"
sed -i '1s;^;#!/usr/bin/env python\n;' /usr/local/bin/jwt2john.py
chmod +x /usr/local/bin/jwt2john.py

# Prowler
pip3 install ansi2html detect-secrets
git clone https://github.com/toniblyx/prowler /opt/prowler

# Mozilla ssh_scan
git clone https://github.com/mozilla/ssh_scan /opt/moz_ssh_scan
apt install ruby-bindata ruby-netaddr ruby-net-ssh ruby-sshkey
cat <<EOT >> /usr/local/bin/ssh_scan
#!/bin/bash
cd /opt/moz_ssh_scan/bin && ./ssh_scan $@
EOT
chmod +x /usr/local/bin/ssh_scan

# vncpasswd.py
git clone https://github.com/trinitronx/vncpasswd.py /opt/vncpasswd
chmod +x /opt/vncpasswd/vncpasswd.py

# SonarQube (Docker)
# You'll need to install the latest image with
# $ sudo docker pull sonarqube
# And then you can run it with:
# $ sudo docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 -v sonarqube-conf:/opt/sonarqube/conf -v sonarqube-data:/opt/sonarqube/data -v sonarqube-logs:/opt/sonarqube/logs -v sonarqube-extensions:/opt/sonarqube/extensions sonarqube
echo "vm.max_map_count=262144" >> /etc/sysctl.d/90-sonarqube.conf
echo "fs.file-max=65536" >> /etc/sysctl.d/90-sonarqube.conf
sysctl -p
echo "root   -   nofile   65536" >> /etc/security/limits.d/99-sonarqube.conf
echo "root   -   nproc    7610" >> /etc/security/limits.d/99-sonarqube.conf
systemctl start docker.service
docker volume create sonarqube-conf
docker volume create sonarqube-data
docker volume create sonarqube-logs
docker volume create sonarqube-extensions
mkdir /opt/sonarqube
ln -s /var/lib/docker/volumes/sonarqube-conf/_data /opt/sonarqube/conf
ln -s /var/lib/docker/volumes/sonarqube-data/_data /opt/sonarqube/data
ln -s /var/lib/docker/volumes/sonarqube-logs/_data /opt/sonarqube/logs
ln -s /var/lib/docker/volumes/sonarqube-extensions/_data /opt/sonarqube/extensions
